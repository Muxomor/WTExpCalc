@using WTExpCalc.Models
@using WTExpCalc.Services
@inject IExperienceApi Api
@inject IJSRuntime JSRuntime

<div class="tech-tree-container @LoadingState">
    @if (GridNodes.Any())
    {
        <div class="tree-grid" style="@GridStyles">
            @{
                var cumulativeRowsBefore = new Dictionary<int, int>();
                if (MaxRank > 0 && MaxRowIndexPerRank != null)
                {
                    int currentCumulativeRowCount = 0;
                    for (int r = 1; r <= MaxRank; r++)
                    {
                        cumulativeRowsBefore[r] = currentCumulativeRowCount;
                        int rowsInRankR = (MaxRowIndexPerRank.TryGetValue(r, out var maxRowIndex) ? maxRowIndex : 0) + 1;
                        currentCumulativeRowCount += rowsInRankR;
                    }
                }

                if (cumulativeRowsBefore != null)
                {
                    @foreach (var rank in Enumerable.Range(1, MaxRank))
                    {
                        int rowsInThisRank = (MaxRowIndexPerRank.TryGetValue(rank, out var maxRowIndex) ? maxRowIndex : 0) + 1;
                        int startGridRow = 2 + (cumulativeRowsBefore.TryGetValue(rank, out var cumRows) ? cumRows : 0);
                        string rankLabelStyle = $"grid-column: 1; grid-row: {startGridRow} / span {rowsInThisRank};";

                        <div class="rank-label" style="@rankLabelStyle">
                            <span>Rank @rank</span>
                        </div>
                    }
                }
            }

            @foreach (var node in GridNodes)
            {
                <div @key="node.Id" class="@GetNodeCssClass(node)" style="@GetNodeGridStyle(node)" id="node-container-@node.Id">
                    @if (node.Type == "folder")
                    {
                        @RenderFolderNode(node)
                    }
                    else
                    {
                        @RenderVehicleNode(node)
                    }
                </div>
            }

            <svg class="tree-connections-overlay" width="100%" height="100%" style="position: absolute; top: 0; left: 0; pointer-events: none; z-index: 0;">
                @if (Dependencies != null)
                {
                    @foreach (var dep in Dependencies)
                    {
                        <line id="dep-@dep.NodeId-@dep.PrerequisiteNodeId"
                              x1="0" y1="0" x2="0" y2="0"
                              stroke="#cccccc" stroke-width="2"
                              marker-end="url(#arrowhead)"
                              visibility="hidden" />
                    }
                    <defs>
                        <marker id="arrowhead" markerWidth="10" markerHeight="7"
                                refX="10" refY="3.5" orient="auto">
                            <polygon points="0 0, 10 3.5, 0 7" fill="#cccccc" />
                        </marker>
                    </defs>
                }
            </svg>
            @{
                // Вычисляем последнюю колонку стандартной техники
                var standardNodes = AllNodesFlat.Where(n => n.TechCategory == "standard");
                int maxStdColIndex = standardNodes.Any() ? standardNodes.Max(n => n.ColumnIndex ?? 0) : -1;
                int standardColumnCount = Math.Max(0, maxStdColIndex + 1);
                int premiumDividerColumn = 2 + standardColumnCount; // +1 за RankLabel, +1 за сам индекс -> +1 за следующую колонку

                // Вычисляем последнюю строку сетки данных
                int lastDataRow = 1 + TotalDataGridRows; // +1, т.к. строки начинаются с 1 в CSS Grid

                // --- Вертикальный разделитель (Премиум) ---
                // Проверяем, есть ли вообще премиум техника
                var premiumNodesExist = AllNodesFlat.Any(n => n.TechCategory != "standard");
                if (premiumNodesExist && standardColumnCount > 0) // Рисуем, только если есть и стандартные, и премиум
                {
                    string premiumDividerStyle = $"grid-column: {premiumDividerColumn}; grid-row: 2 / {lastDataRow + 1};"; // Начинаем со 2-й строки до конца
                    <div class="premium-divider-v" style="@premiumDividerStyle"></div>
                }

                // --- Горизонтальные разделители (Ранги) ---
                for (int rank = 1; rank < MaxRank; rank++) // До предпоследнего ранга
                {
                    // Находим последнюю строку текущего ранга
                    int rowsInThisRank = (MaxRowIndexPerRank.TryGetValue(rank, out var maxRowIdx) ? maxRowIdx : 0) + 1;
                    int startGridRowCurrentRank = 2 + (cumulativeRowsBefore.TryGetValue(rank, out var cumRows) ? cumRows : 0);
                    int endGridRowCurrentRank = startGridRowCurrentRank + rowsInThisRank - 1;

                    // Стиль для разделителя ПОД текущим рангом
                    string rankDividerStyle = $"grid-column: 2 / -1; grid-row: {endGridRowCurrentRank + 1};"; // +1 чтобы линия была ПОД последней строкой ранга
                    <div class="rank-divider-h" style="@rankDividerStyle"></div>
                }
            }

        </div>
    }
    else if (LoadingState != "loading")
    {
        <p>Нет данных для отображения для NationId=@NationId, TypeId=@TypeId.</p>
    }

    @if (LoadingState == "loading")
    {
        <p>Загрузка...</p>
    }
    @if (LoadingState == "error")
    {
        <p style="color: red;">Ошибка загрузки данных!</p>
    }
</div>

@code {
    [Parameter] public int NationId { get; set; }
    [Parameter] public int TypeId { get; set; }

    private List<Node> AllNodesFlat = new();
    private Dictionary<int, Node> NodeLookup = new();
    private List<Node> GridNodes = new();
    private List<NodeDependency> Dependencies = new();
    private HashSet<int> ExpandedFolderIds = new();
    private string LoadingState = "loading";

    private int MaxRank = 0;
    private string GridStyles = "";
    private Dictionary<(int Rank, int Col, string Category), List<Node>> _vehiclesInFoldersCache = new();
    private Dictionary<int, int> MaxRowIndexPerRank = new();
    private int TotalDataGridRows = 0;

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (LoadingState == "loaded" && Dependencies.Any())
        {
            // небольшая задержка, чтобы DOM успел обновиться
            await Task.Delay(50);
            await DrawConnectionLines();
        }
    }

    private async Task LoadData()
    {
        try
        {
            LoadingState = "loading";
            MaxRowIndexPerRank.Clear();
            _vehiclesInFoldersCache.Clear();
            GridNodes.Clear();
            Dependencies.Clear();
            StateHasChanged();

            AllNodesFlat = await Api.GetAllNodesFlatAsync(NationId, TypeId);
            if (AllNodesFlat == null || !AllNodesFlat.Any())
            {
                MaxRank = 0;
                GridStyles = "";
                LoadingState = "loaded";
                StateHasChanged();
                return;
            }

            NodeLookup = AllNodesFlat.ToDictionary(n => n.Id);
            BuildHierarchy();
            PrepareGridNodesAndCalculateRows();
            Dependencies = await Api.GetAllDependenciesAsync(NationId, TypeId);
            CalculateGridDimensions();
            LoadingState = "loaded";
        }
        catch (Exception ex)
        {
            LoadingState = "error";
            Console.WriteLine($"Error loading tech tree data: {ex.Message}");
        }
        StateHasChanged();
    }

    private void BuildHierarchy()
    {
        if (NodeLookup == null || !NodeLookup.Any()) return;

        foreach (var node in AllNodesFlat)
        {
            node.Children.Clear();
            node.ParentNode = null;
            if (node.ParentId.HasValue && NodeLookup.TryGetValue(node.ParentId.Value, out var parent))
            {
                node.ParentNode = parent;
                parent.Children.Add(node);
            }
        }
    }

    private void PrepareGridNodesAndCalculateRows()
    {
        GridNodes.Clear();
        MaxRowIndexPerRank.Clear();
        TotalDataGridRows = 0;

        if (AllNodesFlat == null || !AllNodesFlat.Any()) return;

        foreach (var node in AllNodesFlat)
        {
            int currentMax = MaxRowIndexPerRank.TryGetValue(node.Rank, out var max) ? max : -1;
            if ((node.RowIndex ?? 0) > currentMax) MaxRowIndexPerRank[node.Rank] = node.RowIndex ?? 0;
            else if (!MaxRowIndexPerRank.ContainsKey(node.Rank)) MaxRowIndexPerRank[node.Rank] = node.RowIndex ?? 0;
        }
        TotalDataGridRows = MaxRowIndexPerRank.Sum(kvp => kvp.Value + 1);

        foreach (var node in AllNodesFlat)
        {
            bool isGridNode;
            if (node.ParentNode == null) isGridNode = true;
            else if (node.ParentNode.Type != "folder") isGridNode = true;
            else
            {
                if (node.Rank != node.ParentNode.Rank ||
                    (node.ColumnIndex ?? 0) != (node.ParentNode.ColumnIndex ?? 0) ||
                    (node.RowIndex ?? 0) != (node.ParentNode.RowIndex ?? 0))
                    isGridNode = true;
                else
                    isGridNode = false;
            }
            if (isGridNode) GridNodes.Add(node);
        }
    }

    private void CalculateGridDimensions()
    {
        MaxRank = AllNodesFlat.Any() ? AllNodesFlat.Max(n => n.Rank) : 0;
        var standardNodes = AllNodesFlat.Where(n => n.TechCategory == "standard");
        int maxStd = standardNodes.Any() ? standardNodes.Max(n => n.ColumnIndex ?? 0) : -1;
        var premiumNodes = AllNodesFlat.Where(n => n.TechCategory != "standard");
        int maxPrem = premiumNodes.Any() ? premiumNodes.Max(n => n.ColumnIndex ?? 0) : -1;
        int stdCount = Math.Max(0, maxStd + 1);
        int premCount = Math.Max(0, maxPrem + 1);

        string gridRowsStyle = "auto";
        if (TotalDataGridRows > 0)
            gridRowsStyle += $" repeat({TotalDataGridRows}, minmax(80px, auto))";
        else if (MaxRank > 0)
            gridRowsStyle += $" repeat({MaxRank}, minmax(80px, auto))";

        GridStyles =
            $"display: grid; " +
            $"grid-template-rows: {gridRowsStyle}; " +
            $"grid-template-columns: auto {(stdCount > 0 ? $"repeat({stdCount}, minmax(100px, auto)) " : "")}{(premCount > 0 ? $"repeat({premCount}, minmax(100px, auto))" : "")}; " +
            $"gap: 15px 25px; position: relative;";
    }

    private string GetNodeGridStyle(Node node)
    {
        int col = node.TechCategory == "standard"
            ? 1 + (node.ColumnIndex ?? 0) + 1
            : 1 + ((AllNodesFlat.Where(n => n.TechCategory == "standard").Max(n => n.ColumnIndex ?? 0)) + 1) + (node.ColumnIndex ?? 0) + 1;
        int calculatedRow = 1;
        for (int r = 1; r < node.Rank; r++)
            calculatedRow += (MaxRowIndexPerRank.TryGetValue(r, out var prev) ? prev : 0) + 1;
        calculatedRow += (node.RowIndex ?? 0);
        return $"grid-column: {col}; grid-row: {calculatedRow + 1}; z-index:1; position:relative;";
    }

    private string GetNodeCssClass(Node node)
    {
        // Оставляем только базовые классы
        var cssClasses = $"tree-grid-item node-type-{node.Type} tech-cat-{node.TechCategory}";
        // УБИРАЕМ отсюда логику с folder-open
        return cssClasses;
    }

    private void HandleNodeClick(Node node)
    {
        if (node.Type != "folder") return;

        int clickedId = node.Id;
        bool wasAlreadyExpanded = ExpandedFolderIds.Contains(clickedId);

        // Если кликнутая папка УЖЕ была открыта, просто закрываем ее
        if (wasAlreadyExpanded)
        {
            ExpandedFolderIds.Remove(clickedId);
        }
        else // Иначе (если кликнутая папка была закрыта)
        {
            // Сначала закрываем ВСЕ ранее открытые папки
            ExpandedFolderIds.Clear();
            // Затем открываем ту, по которой кликнули
            ExpandedFolderIds.Add(clickedId);
        }

        StateHasChanged();
        Console.WriteLine($"[TechTree] Toggle folder {node.Id}, wasExpanded: {ExpandedFolderIds.Contains(node.Id)}");
    }

    private RenderFragment RenderFolderNode(Node node) => builder =>
    {
        bool isExpanded = ExpandedFolderIds.Contains(node.Id);
        var children = GetVisualNodesInFolderSequence(node)
                    .Where(c => c.Type == "vehicle")
                    .ToList();
        int seq = 0;

        // Внешний контейнер - ДОБАВЛЯЕМ КЛАСС СЮДА
        builder.OpenElement(seq++, "div");
        // Добавляем класс folder-open сюда, если isExpanded == true
        builder.AddAttribute(seq++, "class", $"folder-visual-container {(isExpanded ? "folder-open" : "")}");

        // Сам «заголовок» папки, по которому кликаем
        builder.OpenElement(seq++, "div");
        // Убрали добавление folder-expanded/folder-collapsed отсюда, если оно было
        builder.AddAttribute(seq++, "class", $"node-content folder-node");
        builder.AddAttribute(seq++, "id", $"node-{node.Id}");
        builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, () => HandleNodeClick(node)));

        // Иконка
        builder.OpenElement(seq++, "div");
        builder.AddAttribute(seq++, "class", "node-icon");
        builder.AddAttribute(seq++, "style", $"background-image:url('{node.ImageUrl}')");
        builder.CloseElement();

        // Название
        builder.OpenElement(seq++, "div");
        builder.AddAttribute(seq++, "class", "node-name");
        builder.AddContent(seq++, node.Name);
        builder.CloseElement();

        // Плюс/минус
        builder.OpenElement(seq++, "div");
        builder.AddAttribute(seq++, "class", "folder-toggle-icon");
        builder.AddContent(seq++, isExpanded ? "−" : "+");
        builder.CloseElement();

        builder.CloseElement(); // закрыли заголовок папки

        // Только если раскрыто и есть дети — рисуем контейнер с ними
        if (isExpanded && children.Any())
        {
            builder.OpenElement(seq++, "div");
            builder.AddAttribute(seq++, "class", "folder-items-container");

            foreach (var child in children)
            {
                builder.AddContent(seq++, RenderVehicleNode(child));
            }

            builder.CloseElement();
        }

        builder.CloseElement(); // закрыли folder-visual-container
    };

    private List<Node> GetVisualNodesInFolderSequence(Node folderNode)
    {
        // Берём из полного списка все узлы, у которых указан order_in_folder
        // и которые лежат в той же «ячейке» (rank, column, row)
        return AllNodesFlat
            .Where(n =>
                n.Rank == folderNode.Rank
                && n.ColumnIndex == folderNode.ColumnIndex
                && n.RowIndex == folderNode.RowIndex
                && n.OrderInFolder.HasValue)
            .OrderBy(n => n.OrderInFolder!.Value)
            .ToList();
    }

    private RenderFragment RenderVehicleNode(Node node) => __builder =>
    {
        __builder.OpenElement(0, "div"); __builder.AddAttribute(1, "id", $"node-{node.Id}"); __builder.AddAttribute(2, "class", "node-content vehicle-node");
        __builder.OpenElement(3, "div"); __builder.AddAttribute(4, "class", "node-icon"); __builder.AddAttribute(5, "style", $"background-image:url('{node.ImageUrl}')"); __builder.CloseElement();
        __builder.OpenElement(6, "div"); __builder.AddAttribute(7, "class", "node-info");
        __builder.OpenElement(8, "div"); __builder.AddAttribute(9, "class", "node-name"); __builder.AddContent(10, node.Name); __builder.CloseElement();
        __builder.OpenElement(11, "div"); __builder.AddAttribute(12, "class", "node-details");
        if (node.Br.HasValue)
        {
            __builder.OpenElement(13, "span"); __builder.AddAttribute(14, "class", "node-br"); __builder.AddContent(15, $"BR: {node.Br}"); __builder.CloseElement();
        }
        if (node.RequiredExp.HasValue && node.RequiredExp > 0)
        {
            __builder.OpenElement(16, "span"); __builder.AddAttribute(17, "class", "node-exp"); __builder.AddContent(18, $"RP: {node.RequiredExp:N0}"); __builder.CloseElement();
        }
        __builder.CloseElement(); __builder.CloseElement(); __builder.CloseElement();
    };

    private async Task DrawConnectionLines()
    {
        if (JSRuntime == null || Dependencies == null || !Dependencies.Any()) return;
        try
        {
            var connectionData = Dependencies.Select(dep => new
            {
                lineId = $"dep-{dep.NodeId}-{dep.PrerequisiteNodeId}",
                sourceElementId = $"node-{dep.PrerequisiteNodeId}",
                targetElementId = $"node-{dep.NodeId}"
            }).ToList();
            await JSRuntime.InvokeVoidAsync("techTreeFunctions.drawConnections", connectionData);
        }
        catch
        {
            // Handle JS interop errors silently
        }
    }
}
