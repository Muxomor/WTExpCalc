@using WTExpCalc.Models
@using WTExpCalc.Services
@inject IExperienceApi Api

<div class="table-responsive">
    @if (AllNodes.Count == 0)
    {
        <p>Нет данных для отображения</p>
    }
    else
    {
        <table class="tree" rules="rows">
            <tbody>
                <tr>
                    <th></th>
                    <th colspan="@MaxStandardColumns">Researchable vehicles</th>
                    <th colspan="@MaxPremiumColumns">Premium vehicles</th>
                </tr>

                @foreach (var rank in Ranks)
                {
                    <tr class="wt-tree_rank">
                        <th>
                            <div class="rank-label">@($"Rank {rank}")</div>
                        </th>

                        @* Стандартные колонки *@
                        @for (int col = 0; col < MaxStandardColumns; col++)
                        {
                            <td class="wt-tree_rank-cell">
                                @RenderCategoryCell("standard", rank, col)
                            </td>
                        }

                        @* Премиум колонки *@
                        @for (int col = 0; col < MaxPremiumColumns; col++)
                        {
                            <td class="wt-tree_rank-cell premium-cell">
                                @RenderCategoryCell("premium", rank, col)
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    [Parameter] public int NationId { get; set; }
    [Parameter] public int TypeId { get; set; }

    private List<Node> AllNodes = new();
    private List<int> Ranks = new();
    private int MaxStandardColumns = 0;
    private int MaxPremiumColumns = 0;

    protected override async Task OnInitializedAsync()
    {
        // загружаем всё
        var roots = await Api.GetAllNodesAsync(NationId, TypeId);
        Flatten(roots);

        Ranks = AllNodes.Select(n => n.Rank)
                        .Distinct()
                        .OrderBy(r => r)
                        .ToList();

        MaxStandardColumns = AllNodes
            .Where(n => n.TechCategory == "standard")
            .Select(n => n.ColumnIndex ?? 0)
            .DefaultIfEmpty(0)
            .Max() + 1;

        MaxPremiumColumns = AllNodes
            .Where(n => n.TechCategory == "premium")
            .Select(n => n.ColumnIndex ?? 0)
            .DefaultIfEmpty(0)
            .Max() + 1;
    }

    void Flatten(IEnumerable<Node> nodes)
    {
        foreach (var n in nodes)
        {
            AllNodes.Add(n);
            if (n.Children != null)
                Flatten(n.Children);
        }
    }

    /// <summary>
    /// Отрисовать все ноды ранга `rank`, категории `techCat` и конкретного столбца `colIndex`.
    /// </summary>
    private RenderFragment RenderCategoryCell(string techCat, int rank, int colIndex)
        => __builder =>
        {
            int seq = 0;
            var nodes = AllNodes
                .Where(n => n.TechCategory == techCat
                         && n.Rank == rank
                         && (n.ColumnIndex ?? 0) == colIndex)
                .OrderBy(n => n.RowIndex);

            foreach (var node in nodes)
            {
                __builder.OpenComponent<TreeNode>(seq++);
                __builder.AddAttribute(seq++, nameof(TreeNode.Node), node);
                __builder.AddAttribute(seq++,
                    nameof(TreeNode.HasChildren),
                    AllNodes.Any(c => c.ParentId == node.Id)
                );
                __builder.CloseComponent();
            }
        };
}
