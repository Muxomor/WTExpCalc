@using WTExpCalc.Models
@using WTExpCalc.Services
@using WTExpCalc.Shared
@inject IExperienceApi Api
@inject NavigationManager Nav
@inject ILocalizationService Localization
@implements IDisposable

<nav class="flex-column">
    <div class="nav-scrollable">
        @if (nations == null)
        {
           <div class="nav-item px-1 py-2 text-center">
               <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
           </div>
        }
        else
        {
            @foreach (var nation in nations)
            {
                <div class="nav-item">
                    <a class="nav-link py-2 px-0 d-flex justify-content-center align-items-center @GetActiveCssClass(nation.Slug)"
                       href="@GetNationUrl(nation.Slug)"
                       title="@GetNationDisplayName(nation)">
                        <img src="@nation.ImageUrl"
                             alt="@GetNationDisplayName(nation)" class="nation-flag-icon" />
                    </a>
                </div>
            }
        }
    </div>
    @if (!string.IsNullOrEmpty(currentVersion))
    {
        <div class="version-info">
            @currentVersion
        </div>
    }

    <LanguageToggle />
</nav>

@code {
    private List<Nation>? nations;
    private List<VehicleType>? vehicleTypes;
    private string currentUrl = "";
    private string currentVersion = "";

    protected override async Task OnInitializedAsync()
    {
        nations = await Api.GetNationsAsync();
        vehicleTypes = await Api.GetVehicleTypesAsync();
        
        await LoadVersionAsync();

        Nav.LocationChanged += OnLocationChanged;
        currentUrl = Nav.Uri;
        Localization.LanguageChanged += OnLanguageChanged;
    }

    private async Task LoadVersionAsync()
    {
        try
        {
            var version = await Api.GetCurrentVersionAsync();
            currentVersion = version?.VersionNumber ?? "";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading version: {ex.Message}");
            currentVersion = "";
        }
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        currentUrl = e.Location;
        StateHasChanged();
    }

    private void OnLanguageChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private string GetNationDisplayName(Nation nation)
    {
        return SimpleGameLocalization.GetNationName(nation.Name, Localization.IsEnglish, nation.Id);
    }

    private string GetActiveCssClass(string nationSlug)
    {
        var uri = new Uri(currentUrl);
        var segments = uri.LocalPath.Split('/', StringSplitOptions.RemoveEmptyEntries);

        if (segments.Length >= 2 && segments[0] == "tree" && segments[1] == nationSlug)
        {
            return "active";
        }

        return "";
    }

    private string GetNationUrl(string nationSlug)
    {
        if (vehicleTypes != null && vehicleTypes.Any())
        {
            var firstType = vehicleTypes.First();
            return $"/tree/{nationSlug}/{firstType.Slug}";
        }
        return $"/tree/{nationSlug}";
    }

    public void Dispose()
    {
        Nav.LocationChanged -= OnLocationChanged;
        Localization.LanguageChanged -= OnLanguageChanged;
    }
}