@page "/tree/{NationSlug}/{TypeSlug?}"
@using WTExpCalc.Models
@using WTExpCalc.Services
@using WTExpCalc.Shared
@using static WTExpCalc.Shared.TechTree
@inject IExperienceApi Api
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IUrlStateManager UrlStateManager
@inject ILocalizationService Localization
@implements IDisposable

<h3>@Localization.GetText("TechTreeFor") @GetNationDisplayName()</h3>

@if (isLoading)
{
        <p><em>@Localization.GetText("LoadingData")</em></p>
}
else if (loadingError != null)
{
        <div class="alert alert-danger" style="background-color: #5a1e1e; border-color: #721c24; color: #f8d7d7;">
            <p>@Localization.GetText("Error"): @loadingError</p>
            <button class="btn btn-primary" @onclick="RetryLoad">@Localization.GetText("Retry")</button>
        </div>
}
else if (vehicleTypes == null || !vehicleTypes.Any())
{
        <p><em>@Localization.GetText("NoVehicleTypes")</em></p>
}
else
{
        <ul class="nav nav-tabs">
        @foreach (var vt in vehicleTypes)
        {
                    <li class="nav-item">
                        <a class="nav-link @(vt.Slug == activeTypeSlug ? "active" : "")"
                           href="/tree/@NationSlug/@vt.Slug">
                    @GetVehicleTypeDisplayName(vt)
                        </a>
                    </li>
        }
        </ul>

        <div class="tab-content mt-3">
        @if (activeTypeId != null && activeNationId != null)
        {
                    <TechTree @ref="techTreeRef" 
                              NationId="activeNationId.Value" 
                              TypeId="activeTypeId.Value" 
                              OnTotalsUpdated="HandleTotalsUpdate"
                              OnSelectedRanksChanged="HandleSelectedRanksChanged" />
        }
        </div>

        <div id="summary-container">
            <div id="summary-panel">
                <span class="summary-item summary-rp">
                    <span>@Localization.GetText("RP"):</span> @currentTotalRp.ToString("N0")
                </span>
                <span class="summary-item summary-sl">
                    <span>@Localization.GetText("SL"):</span> @currentTotalSl.ToString("N0")
                </span>
            </div>

            <div id="selected-names-container">
                <div id="selected-names-panel">
                @if (!string.IsNullOrEmpty(selectedVehicleNames))
                {
                            <span title="@selectedVehicleNames">
                        @Localization.GetText("Selected"): @selectedVehicleNames
                            </span>
                }
                else
                {
                            <span>&nbsp;</span>
                }
                </div>
            @if (!string.IsNullOrEmpty(selectedVehicleNames))
            {
                        <button class="btn btn-sm btn-secondary copy-button" 
                                title="@Localization.GetText("CopyList")" 
                                @onclick="CopyNamesToClipboard">
                            <i class="bi bi-clipboard"></i>
                        </button>
                        <button class="btn btn-sm btn-info copy-button" 
                                title="@Localization.GetText("CopyUrl")" 
                                @onclick="CopyUrlToClipboard" 
                                style="margin-left: 5px;">
                            <i class="bi bi-link-45deg"></i>
                        </button>
                        <button class="btn btn-sm copy-button screenshot-button" 
                                title="@GetScreenshotButtonTitle()" 
                                @onclick="CopyScreenshotToClipboard" 
                                disabled="@(!hasSelectedRanks || isScreenshotInProgress)"
                                style="margin-left: 5px;">
                            <i class="bi bi-camera"></i>
                        </button>
                        <button class="btn btn-sm copy-button screenshot-button" 
                                title="@Localization.GetText("DownloadScreenshot")" 
                                @onclick="DownloadScreenshot" 
                                disabled="@(!hasSelectedRanks || isScreenshotInProgress)"
                                style="margin-left: 5px;">
                            <i class="bi bi-download"></i>
                        </button>
            }
            </div>
        </div>
}
@if (isScreenshotInProgress)
{
        <div class="screenshot-loading-overlay">
            <div class="screenshot-loading-content">
                <div class="screenshot-loading-spinner"></div>
                <div>@screenshotProgressMessage</div>
            </div>
        </div>
}

@code {
    [Parameter] public string NationSlug { get; set; } = string.Empty;
    [Parameter] public string? TypeSlug { get; set; }

    private TechTree? techTreeRef;
    private List<VehicleType>? vehicleTypes;
    private string? activeTypeSlug;
    private int? activeTypeId;
    private int? activeNationId;
    private Nation? currentNation;
    private long currentTotalRp = 0;
    private long currentTotalSl = 0;
    private string selectedVehicleNames = "";
    private string formattedVehicleText = "";
    private bool isLoading = false;
    private string? loadingError = null;

    private bool hasSelectedRanks = false;
    private bool isScreenshotInProgress = false;
    private string screenshotProgressMessage = "";

    protected override async Task OnParametersSetAsync()
    {
        await LoadPageData();
    }
    protected override async Task OnInitializedAsync()
    {
        var savedLang = await Localization.LoadSavedLanguageAsync();
        await Localization.SetLanguageAsync(savedLang);

        Localization.LanguageChanged += OnLanguageChanged;
    }

    private void OnLanguageChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private string GetVehicleTypeDisplayName(VehicleType vt)
    {
        return SimpleGameLocalization.GetVehicleTypeName(vt.Name, vt.NameEnglish, Localization.IsEnglish);
    }

    private string GetNationDisplayName()
    {
        return currentNation != null ?
               SimpleGameLocalization.GetNationName(currentNation.Name, Localization.IsEnglish, currentNation.Id) :
               Localization.GetText("Loading");
    }

    private string GetScreenshotButtonTitle()
    {
        var uri = new Uri(Navigation.Uri);
        if (uri.Scheme == "http")
        {
            return Localization.GetText("CopyScreenshot") + " (HTTP)";
        }
        return Localization.GetText("CopyScreenshot");
    }

    private async Task LoadPageData()
    {
        try
        {
            isLoading = true;
            loadingError = null;
            StateHasChanged();

            // Загружаем нацию по slug
            currentNation = await Api.GetNationBySlugAsync(NationSlug);
            if (currentNation == null)
            {
                loadingError = $"Нация '{NationSlug}' не найдена.";
                return;
            }

            activeNationId = currentNation.Id;

            // Загружаем типы техники
            vehicleTypes = await Api.GetVehicleTypesAsync();
            if (vehicleTypes == null || !vehicleTypes.Any())
            {
                loadingError = "Не удалось загрузить типы техники.";
                return;
            }

            // Определяем активный тип техники
            if (!string.IsNullOrEmpty(TypeSlug))
            {
                // Проверяем валидность slug
                if (!VehicleTypeFormattingUtils.IsValidSlug(TypeSlug))
                {
                    var firstType = vehicleTypes.First();
                    Navigation.NavigateTo($"/tree/{NationSlug}/{firstType.Slug}", replace: true);
                    return;
                }

                var requestedType = vehicleTypes.FirstOrDefault(vt => vt.Slug == TypeSlug);
                if (requestedType != null)
                {
                    activeTypeSlug = requestedType.Slug;
                    activeTypeId = requestedType.Id;
                }
                else
                {
                    var firstType = vehicleTypes.First();
                    Navigation.NavigateTo($"/tree/{NationSlug}/{firstType.Slug}", replace: true);
                    return;
                }
            }
            else
            {
                // Перенаправляем на первый доступный тип
                var firstType = vehicleTypes.First();
                Navigation.NavigateTo($"/tree/{NationSlug}/{firstType.Slug}", replace: true);
                return;
            }

            // Сбрасываем данные при смене параметров
            selectedVehicleNames = "";
            formattedVehicleText = "";
            currentTotalRp = 0;
            currentTotalSl = 0;
            hasSelectedRanks = false;
        }
        catch (Exception ex)
        {
            loadingError = $"Произошла ошибка при загрузке данных: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RetryLoad()
    {
        await LoadPageData();
    }

    private async Task CopyUrlToClipboard()
    {
        try
        {
            await UrlStateManager.CopyCurrentUrlToClipboardAsync();
        }
        catch (Exception ex)
        {
            // Обработка ошибки копирования URL
        }
    }

    private async Task CopyNamesToClipboard()
    {
        // Используем отформатированный текст вместо обычного списка имен
        if (!string.IsNullOrEmpty(formattedVehicleText))
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("techTreeFunctions.copyTextToClipboard_fallback", formattedVehicleText);
            }
            catch (Exception ex)
            {
                // Обработка ошибки копирования, если нужно
            }
        }
    }

    private async Task CopyScreenshotToClipboard()
    {
        if (techTreeRef == null || !hasSelectedRanks || isScreenshotInProgress) return;

        try
        {
            isScreenshotInProgress = true;
            screenshotProgressMessage = "Подготовка скриншота...";
            StateHasChanged();

            await techTreeRef.CopyScreenshotToClipboard();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error copying screenshot: {ex.Message}");
            screenshotProgressMessage = "Ошибка создания скриншота";
            await Task.Delay(2000);
        }
        finally
        {
            isScreenshotInProgress = false;
            StateHasChanged();
        }
    }

    private async Task DownloadScreenshot()
    {
        if (techTreeRef == null || !hasSelectedRanks || isScreenshotInProgress) return;

        try
        {
            isScreenshotInProgress = true;
            screenshotProgressMessage = "Подготовка скриншота...";
            StateHasChanged();

            await techTreeRef.DownloadScreenshot();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading screenshot: {ex.Message}");
            screenshotProgressMessage = "Ошибка создания скриншота";
            await Task.Delay(2000);
        }
        finally
        {
            isScreenshotInProgress = false;
            StateHasChanged();
        }
    }

    private void HandleTotalsUpdate(WTExpCalc.Shared.TechTree.TotalsUpdateEventArgs args)
    {
        currentTotalRp = args.TotalRp;
        currentTotalSl = args.TotalSl;
        selectedVehicleNames = args.SelectedNames; // Для отображения на экране
        formattedVehicleText = args.FormattedText;  // Для копирования
        StateHasChanged(); // Обновляем UI после получения новых данных
    }

    private void HandleSelectedRanksChanged(List<int> selectedRanks)
    {
        hasSelectedRanks = selectedRanks != null && selectedRanks.Any();
        StateHasChanged();
    }

    // Методы для обработки callback'ов из JavaScript
    [JSInvokable]
    public void OnScreenshotProgress(string message)
    {
        screenshotProgressMessage = message;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnScreenshotComplete(bool success, string message)
    {
        screenshotProgressMessage = message;
        StateHasChanged();

        // Скрываем индикатор через 2 секунды
        Task.Delay(2000).ContinueWith(_ =>
        {
            InvokeAsync(() =>
            {
                isScreenshotInProgress = false;
                StateHasChanged();
            });
        });
    }

    public void Dispose()
    {
        Localization.LanguageChanged -= OnLanguageChanged;
    }
}