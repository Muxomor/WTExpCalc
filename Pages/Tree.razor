@* Tree.razor (без изменений маршрутизации) *@
@page "/tree/{NationId:int}"
@using WTExpCalc.Models
@using WTExpCalc.Services
@using WTExpCalc.Shared
@using static WTExpCalc.Shared.TechTree
@inject IExperienceApi Api
@inject IJSRuntime JSRuntime

<h3>Ветка прокачки для нации @FormatNationName(currentNation?.Name)</h3>
@if (vehicleTypes == null)
{
    <p><em>Загрузка типов…</em></p>
}
else
{
    <ul class="nav nav-tabs">
        @foreach (var vt in vehicleTypes)
        {
            <li class="nav-item">
                <a class="nav-link @(vt.Id == activeTypeId ? "active" : "")"
                   href="#"
                   @onclick="() => SelectType(vt.Id)"
                @onclick:preventDefault>
                    @vt.Name
                </a>
            </li>
        }
    </ul>

    <div class="tab-content mt-3">
        @if (activeTypeId != null)
        {
            <TechTree NationId="NationId" TypeId="activeTypeId.Value" OnTotalsUpdated="HandleTotalsUpdate" />
        }
    </div>
    <div id="summary-container">
        <div id="summary-panel">
            <span class="summary-item summary-rp">
                <span>RP:</span> @currentTotalRp.ToString("N0")
            </span>
            <span class="summary-item summary-sl">
                <span>SL:</span> @currentTotalSl.ToString("N0")
            </span>
        </div>

        @* Контейнер для имен и кнопки копирования *@
        <div id="selected-names-container">
            <div id="selected-names-panel">
                @if (!string.IsNullOrEmpty(selectedVehicleNames))
                {
                    <span title="@selectedVehicleNames">
                        @* Добавляем title с полным списком *@
                        Выбрано: @selectedVehicleNames
                    </span>
                }
                else
                {
                    <span>&nbsp;</span>
                }
            </div>
            @* Кнопка копирования (появляется, если есть что копировать) *@
            @if (!string.IsNullOrEmpty(selectedVehicleNames))
            {
                <button class="btn btn-sm btn-secondary copy-button" title="Копировать список" @onclick="CopyNamesToClipboard">
                    <i class="bi bi-clipboard"></i> @* Иконка копирования Bootstrap Icons *@
                </button>
            }
        </div>
    </div>
}

@code {
    [Parameter] public int NationId { get; set; }
    private List<VehicleType>? vehicleTypes;
    private int? activeTypeId;
    private Nation? currentNation; // Переменная для хранения данных о нации
    private long currentTotalRp = 0;
    private long currentTotalSl = 0;
    private string selectedVehicleNames = "";

    protected override async Task OnParametersSetAsync() // Используем OnParametersSetAsync, чтобы реагировать на изменение NationId
    {
        // Сбрасываем состояние при смене параметра
        vehicleTypes = null;
        currentNation = null;
        activeTypeId = null;
        StateHasChanged(); // Показать индикатор загрузки

        vehicleTypes = await Api.GetVehicleTypesAsync();
        currentNation = await Api.GetNationByIdAsync(NationId); // Загружаем данные о нации

        if (vehicleTypes != null && vehicleTypes.Any())
        {
            activeTypeId = vehicleTypes.First().Id; // Устанавливаем первую вкладку активной
            selectedVehicleNames = "";
            currentTotalRp = 0;
            currentTotalSl = 0;
        }
        StateHasChanged(); // Обновить UI с загруженными данными
    }
    private async Task CopyNamesToClipboard()
    {
        if (!string.IsNullOrEmpty(selectedVehicleNames))
        {
            try
            {
                // Вызываем новую JS функцию для копирования
                await JSRuntime.InvokeVoidAsync("techTreeFunctions.copyTextToClipboard_fallback", selectedVehicleNames);
                // Можно добавить уведомление для пользователя (сложнее)
                Console.WriteLine("Copied names to clipboard."); // Пока выводим в консоль
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error copying to clipboard: {ex.Message}");
            }
        }
    }
    private void HandleTotalsUpdate(TotalsUpdateEventArgs args)
    {
        Console.WriteLine($"[DEBUG] HandleTotalsUpdate called in Tree.razor. Received RP: {args.TotalRp}, SL: {args.TotalSl}"); // <-- ДОБАВИТЬ

        currentTotalRp = args.TotalRp;
        currentTotalSl = args.TotalSl;
        selectedVehicleNames = args.SelectedNames;

        Console.WriteLine($"[DEBUG] Tree.razor state updated: currentTotalRp={currentTotalRp}, currentTotalSl={currentTotalSl}"); // <-- ДОБАВИТЬ

        // StateHasChanged(); // Убедитесь, что этот вызов есть
        Console.WriteLine("[DEBUG] StateHasChanged called in HandleTotalsUpdate."); // <-- ДОБАВИТЬ
    }
    void SelectType(int id)
    {
        activeTypeId = id;
        // StateHasChanged() здесь обычно не нужен, Blazor сам отследит изменение
    }

    // Вспомогательный метод для форматирования имени нации
    private string FormatNationName(string? name)
    {
        if (string.IsNullOrEmpty(name))
            return $"ID: {NationId}"; // Возвращаем ID, если имя не загрузилось
        if (name.Length == 1)
            return name.ToUpper();
        return char.ToUpper(name[0]) + name.Substring(1);
    }
}