@page "/"
@using WTExpCalc.Models
@using WTExpCalc.Services
@using WTExpCalc.Shared
@inject IExperienceApi Api
@inject NavigationManager Nav

<h3>Выберите нацию</h3>

@if (nations == null)
{
        <p><em>Загрузка…</em></p>
}
else if (loadError != null)
{
        <div class="alert alert-danger" style="background-color: #5a1e1e; border-color: #721c24; color: #f8d7d7;">
            <p>Ошибка загрузки: @loadError</p>
            <button class="btn btn-primary" @onclick="ReloadData">Повторить</button>
        </div>
}
else
{
        <div class="row">
        @foreach (var n in nations)
        {
                    <div class="col-6 col-md-4 col-lg-3 mb-4">
                        <div class="card h-100 nation-card"
                             style="cursor:pointer;"
                             @onclick="@(() => NavigateToNation(n.Slug))">
                            <img src="@n.ImageUrl"
                                 class="card-img-top p-3"
                                 alt="@n.DisplayName" style="height:120px; object-fit:contain;" />
                            <div class="card-footer text-center">
                                <strong>@n.DisplayName</strong>
                            </div>
                        </div>
                    </div>
        }
        </div>
}

@code {
    private List<Nation>? nations;
    private List<VehicleType>? vehicleTypes;
    private string? loadError;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            loadError = null;
            nations = await Api.GetNationsAsync();
            vehicleTypes = await Api.GetVehicleTypesAsync();
        }
        catch (Exception ex)
        {
            loadError = $"Ошибка загрузки данных: {ex.Message}";
        }
    }

    private async Task ReloadData()
    {
        nations = null;
        vehicleTypes = null;
        StateHasChanged();
        await LoadData();
    }

    private async Task NavigateToNation(string nationSlug)
    {
        try
        {
            if (vehicleTypes == null || !vehicleTypes.Any())
            {
                vehicleTypes = await Api.GetVehicleTypesAsync();
            }

            if (vehicleTypes != null && vehicleTypes.Any())
            {
                var firstType = vehicleTypes.First();
                string targetUrl = $"/tree/{nationSlug}/{firstType.Slug}";
                Nav.NavigateTo(targetUrl);
            }
            else
            {
                loadError = "Не удалось загрузить типы техники для навигации";
            }
        }
        catch (Exception ex)
        {
            loadError = $"Ошибка навигации: {ex.Message}";
        }
    }
}